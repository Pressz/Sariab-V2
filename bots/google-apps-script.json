{"files":[{"id":"6b6d8fc8-5ece-41de-b872-0b4d4b8aeeac","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Tehran\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"2f528582-e026-4726-b628-88a7215c62ec","name":"HackerNews","type":"server_js","source":"function HackerNewsSyncDataSheet() {\n\n  // Fetch new stories form HackerNews\n  var newStoriesIds \u003d HackerNewsFetchNewStories();\n\n  // Open Sheet for Data I/O\n  var sheet \u003d CreateOrOpenSpreadSheet(\"Sariab_HackerNews\");\n\n  // get lastId to prevent duplicate\n  var lastId \u003d GetLastId(sheet);\n\n  // Prune array\n  var prunedStoryIds \u003d newStoriesIds.filter(function(x) {\n      return x \u003e lastId ;\n  });\n\n  // Iterate items\n  prunedStoryIds.forEach(function (value) {\n    // TODO: Run it as async task\n    // Async.call(\u0027fetchStoryDetailsAndAdd\u0027, value)\n    \n    var itemDetails \u003d HackerNewsFetchStoryDetails(value);\n\n    Logger.log(itemDetails);\n\n    // Append to sheet\n    sheet.appendRow([false, value, itemDetails.title, itemDetails.url, itemDetails.text, itemDetails.by]);\n  });\n}\n\nfunction HackerNewsFetchNewStories() {\n  var url \u003d \"https://hacker-news.firebaseio.com/v0/newstories.json\";\n  var newStoriesReponse \u003d UrlFetchApp.fetch(url, {\u0027muteHttpExceptions\u0027: true});\n  var newStoriesIds \u003d JSON.parse(newStoriesReponse.getContentText());\n  return newStoriesIds;\n}\n\nfunction HackerNewsFetchStoryDetails(storyId) {\n    var url \u003d `https://hacker-news.firebaseio.com/v0/item/${storyId}.json?print\u003dpretty`;\n    var itemResponse \u003d UrlFetchApp.fetch(url, {\u0027muteHttpExceptions\u0027: true});\n    var itemDetails \u003d JSON.parse(itemResponse.getContentText());\n    return itemDetails;\n}"},{"id":"0cf731dd-15a1-4627-8999-2bfecb659fc4","name":"Async","type":"server_js","source":"/*\n* Async.gs\n*\n* Downloaded from https://gist.githubusercontent.com/sdesalas/2972f8647897d5481fd8e01f03122805/raw/3185f00ca9b6b7f921ef4fbfa387b625d224c6b1/Async.gs\n*\n* Manages asyncronous execution via time-based triggers.\n*\n* Note that execution normally takes 30-60s due to scheduling of the trigger.\n*\n* @see https://developers.google.com/apps-script/reference/script/clock-trigger-builder.html\n*/\n\nvar Async \u003d Async || {};\nvar GLOBAL \u003d this;\n\n// Triggers asynchronous execution of a function (with arguments as extra parameters)\nAsync.call \u003d function(handlerName) {\n  return Async.apply(handlerName, Array.prototype.slice.call(arguments, 1));\n};\n\n// Triggers asynchronous execution of a function (with arguments as an array)\nAsync.apply \u003d function(handlerName, args) {\n  var trigger \u003d ScriptApp\n  .newTrigger(\u0027Async_handler\u0027)\n  .timeBased()\n  .after(1)\n  .create();\n  CacheService.getScriptCache().put(String(trigger.getUniqueId()), JSON.stringify({ handlerName: handlerName, args: args }));\n  return { \n    triggerUid: trigger.getUniqueId(),\n    source: String(trigger.getTriggerSource()), \n    eventType: String(trigger.getEventType()), \n    handlerName: handlerName,\n    args: args\n  };\n};\n\n// GENERIC HANDLING BELOW\n// \nfunction Async_handler(e) {\n  var triggerUid \u003d e \u0026\u0026 e.triggerUid;\n  var cache \u003d CacheService.getScriptCache().get(triggerUid);\n  if (cache) {\n    try {\n      var event \u003d JSON.parse(cache);\n      var handlerName \u003d event \u0026\u0026 event.handlerName;\n      var args \u003d event \u0026\u0026 event.args;\n      if (handlerName) {\n        var context, fn \u003d handlerName.split(\u0027.\u0027).reduce(function(parent, prop) {\n          context \u003d parent;\n          return parent \u0026\u0026 parent[prop];\n        }, GLOBAL);\n        if (!fn || !fn.apply) throw \"Handler `\" + handlerName + \"` does not exist! Exiting..\";\n        // Execute with arguments\n        fn.apply(context, args || []);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  // Delete the trigger, it only needs to be executed once\n  ScriptApp.getProjectTriggers().forEach(function(t) {\n    if (t.getUniqueId() \u003d\u003d\u003d triggerUid) {\n      ScriptApp.deleteTrigger(t);\n    }\n  });\n};"},{"id":"a0e3db16-c4f9-4727-a900-eafe0318fa19","name":"Master","type":"server_js","source":"function MoveToMaster()\n{\n  var mainSheet \u003d CreateOrOpenSpreadSheet(\"Sariab_Master\");\n\n  // Sync HackerNews Storage\n  var sheet \u003d CreateOrOpenSpreadSheet(\"Sariab_HackerNews\");\n  var results \u003d FetchAndFlagRows(sheet, false, \"MOVED_TO_MASTER\", 50);\n\n  // Iterate items\n  results.forEach(function (value) {\n    // Filter Data\n    // TODO:\n\n    // Add to Master file\n    var row \u003d [\"PENDING\", \"hackernews.com\", value[1], value[2], value[3], value[4]];\n    Logger.log(row);\n    mainSheet.appendRow(row);\n  });\n\n  // TODO: Data Providers 2, 3, 4, 5, 6, ..\n\n}"},{"id":"a31e3dc8-2325-4e30-b089-7b085eff252f","name":"Storage","type":"server_js","source":"function GetLastId(sheet) {\n  var lastRow \u003d sheet.getLastRow();\n  if (lastRow \u003d\u003d 0)\n    return 0;\n  var range \u003d sheet.getRange(2, 2, lastRow);\n  var colArray \u003d range.getValues();\n  var maxInColumn \u003d colArray.sort(function(a,b){return b-a})[0][0];\n  return maxInColumn;\n}\n\nfunction CreateOrOpenSpreadSheet(fileName) {\n  var iterator \u003d DriveApp.getFilesByName(fileName);\n  while (iterator.hasNext())\n  {\n    var file \u003d iterator.next();\n    if (file.getName() \u003d\u003d fileName)\n    {\n      var spreadsheet \u003d SpreadsheetApp.open(file);\n      var activeSheet \u003d spreadsheet.getActiveSheet();\n      return activeSheet;\n    }\n  }\n  var spreadsheet \u003d SpreadsheetApp.create(fileName);\n  var url \u003d spreadsheet.getUrl();\n  Logger.log(`Opened Datasheet: ${url}`);\n  var activeSheet \u003d spreadsheet.getActiveSheet();\n  return activeSheet;\n}\n\nfunction FetchAndFlagRows(sheet, search, replace, max_rows \u003d 5) {\n  var max_columns \u003d 6;\n  var begin \u003d sheet.getLastRow() - max_rows + 1;\n  var falseRows \u003d [];\n\n  while (begin \u003e 0 \u0026\u0026 falseRows.length \u003c max_rows)\n  {\n    var rows \u003d sheet.getRange(begin, 1, max_rows, max_columns).getValues();\n    var rowIndex \u003d begin;\n    rows.forEach(function (row) {\n      var flag \u003d row[0];\n      if (flag \u003d\u003d search)\n      {\n        sheet.getRange(rowIndex, 1).setValue(replace);\n        falseRows[falseRows.length] \u003d row;\n      }\n      rowIndex++;\n    });\n    begin -\u003d max_rows - falseRows.length;\n  }\n\n  return falseRows;\n}"},{"id":"e8441682-4668-4965-9e90-d889ed1db788","name":"Telegram","type":"server_js","source":"function PostFromSariabToChannel() {\n  // TODO:\n}\n"},{"id":"cae60f94-a1ef-4246-8b26-bf171e54d204","name":"Backup","type":"server_js","source":"function Backup() {\n  // Rename files and at the end of each week\n}\n"},{"id":"9495a3d0-3261-49b6-84c1-50f5e2f7553b","name":"SariabAPI","type":"server_js","source":"function PostToSariab()\n{\n  var mainSheet \u003d CreateOrOpenSpreadSheet(\"Sariab_Master\");\n  var results \u003d FetchAndFlagRows(mainSheet, \"PENDING\", \"POSTED_TO_SARIAB\", 10);\n  results.forEach(function (value) {\n    Logger.log(value);\n\n    // Take care of our server (:\n    Utilities.sleep(5 * 1000);\n\n    var post_title \u003d value[3];\n    var post_canonical \u003d value[4];\n    var post_abstract \u003d value[5];\n\n    const makeHttpPostRequest \u003d () \u003d\u003e {\n\n        const url \u003d \u0027http://sariab.ir/Api/NewPost\u0027;\n\n        const payload \u003d {\n          Title: post_title,\n          Language: \"en\",\n          Canonical: post_canonical,\n          Abstract: post_abstract\n        };\n\n        var encodedAuthInformation \u003d Utilities.base64Encode(GetSariabUsername() + \":\" + GetSariabPassword());\n        var headers \u003d {\"Authorization\" : \"Basic \" + encodedAuthInformation};\n\n        const options \u003d {\n          headers: headers,\n          method: \u0027POST\u0027,\n          followRedirects: true,\n          muteHttpExceptions: true,\n          payload: JSON.stringify(payload),\n        };\n\n        const response \u003d UrlFetchApp.fetch(url, options);\n        if (response.getResponseCode() !\u003d 200) {\n            // TODO: Update records in database with POST_FAILED status\n        }\n    };\n\n    makeHttpPostRequest();\n  });\n}\n\nfunction UpdateApprovedPosts()\n{\n  // TODO:\n}"},{"id":"6c5d88e1-6bf0-4bfb-a5fb-5d9095f0f264","name":"Secrets","type":"server_js","source":"function GetSariabUsername() {\n  return \"tayyebi\";\n}\n\nfunction GetSariabPassword() {\n  return \"\";\n}\n"},{"id":"292e0e7e-9dc7-4360-8fa0-55867039a172","name":"Maintenance","type":"server_js","source":"function Statistics() {\n    const makeHttpPostRequest \u003d () \u003d\u003e {\n\n      const url \u003d \u0027http://sariab.ir/Maintenance/Statistics\u0027;\n\n      var encodedAuthInformation \u003d Utilities.base64Encode(GetSariabUsername() + \":\" + GetSariabPassword());\n      var headers \u003d {\"Authorization\" : \"Basic \" + encodedAuthInformation};\n\n      const options \u003d {\n        headers: headers,\n        method: \u0027GET\u0027,\n        followRedirects: true,\n        muteHttpExceptions: true,\n      };\n\n      const response \u003d UrlFetchApp.fetch(url, options);\n\n      Logger.log(response);\n  };\n\n  makeHttpPostRequest();\n}\n\n"}]}